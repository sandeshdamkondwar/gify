{"version":3,"sources":["components/GIFPlayer/GIFPlayer.tsx","routes/Home/Home.tsx","hooks/useWindowSize.ts","helpers/utils.ts"],"names":["GifPlayer","gif","still","title","className","height","useState","playing","setplaying","toggle","useCallback","classes","classNames","onClick","src","alt","gf","GiphyFetch","React","memo","query","cols","setCols","windowSize","width","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","setHeight","fetchGifs","offset","search","limit","then","res","data","screenWidth","items","Array","map","heights","fill","i","length","image","selectCol","indexOf","Math","min","images","fixed_width","heightWithRatio","parseInt","push","fixed_width_still","generateCols","floor","getNoOfCols","max","style","colItems","key","colItem","itemKey","url"],"mappings":"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","file":"static/js/Home.[hash].92e915f1.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport classNames from \"classnames\";\n\nimport \"./GIFPlayer.scss\";\n\ninterface IGIFPlayerProps {\n  gif: string;\n  still: string;\n  height: number;\n  title: string;\n  className: string;\n}\n\nconst GifPlayer = ({\n  gif,\n  still,\n  title,\n  className,\n  height,\n}: IGIFPlayerProps) => {\n  const [playing, setplaying] = useState(false);\n\n  const toggle = useCallback(() => {\n    setplaying(!playing);\n  }, [playing]);\n\n  const classes = classNames(\"gif_player\", className, { playing: playing });\n\n  return (\n    <div className={classes} onClick={toggle}>\n      <div className=\"play_button\"></div>\n      <img\n        height={height}\n        src={playing ? gif || still : still || gif}\n        alt={title}\n      />\n    </div>\n  );\n};\n\nexport default GifPlayer;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { GiphyFetch } from \"@giphy/js-fetch-api\";\n\n// Helpers\nimport { generateCols, getNoOfCols } from \"../../helpers/utils\";\n\n// Hooks\nimport useWindowSize from \"../../hooks/useWindowSize\";\n\n// Defs\nimport { IGifItem } from \"../../defs/interfaces\";\n\n// Components\nimport GIFPlayer from \"../../components/GIFPlayer\";\n\nconst GIPHY_KEY = \"dLTulzVpNZqXjYVV7bCY7SAW2cpASWSk\";\nconst gf = new GiphyFetch(GIPHY_KEY);\n\ninterface IProps {\n  query: string;\n}\n\nfunction Home({ query }: IProps) {\n  const [cols, setCols] = useState<any[]>([]);\n  const windowSize = useWindowSize();\n  const [height, setHeight] = useState(0);\n  const fetchGifs = useCallback(\n    (offset: number) => {\n      return gf.search(query, { offset, limit: 10 });\n    },\n    [query]\n  );\n\n  useEffect(() => {\n    if (windowSize.width > 0) {\n      fetchGifs(10).then((res: any) => {\n        const { items, heights } = generateCols(\n          res.data,\n          windowSize.width,\n          getNoOfCols(windowSize.width)\n        );\n        setHeight(Math.max(...heights));\n        setCols(items);\n      });\n    }\n  }, [fetchGifs, windowSize]);\n\n  return (\n    <div className=\"gif-items-cols\" style={{ height }}>\n      {cols.map((colItems: Array<any>, key: number) => {\n        return (\n          <div key={key} className=\"gif-items-col\">\n            {colItems.map((colItem: IGifItem, itemKey: number) => (\n              <GIFPlayer\n                className=\"gif-item\"\n                key={itemKey}\n                gif={colItem.gif.url}\n                still={colItem.still.url}\n                title={colItem.title}\n                height={colItem.height}\n              />\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default React.memo(Home);\n","import { useState, useEffect } from \"react\";\n\nexport default function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: 0,\n    height: 0,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n","import { GIFDatum } from \"../defs/interfaces\";\n\nexport function getNoOfCols(windowSize: number) {\n  if (windowSize < 500) return 2;\n  else if (windowSize < 700) return 3;\n  else return Math.floor(windowSize / 250);\n}\n\nexport function generateCols(\n  data: GIFDatum[],\n  screenWidth: number,\n  cols: number\n) {\n  const items: Array<any> = [...new Array(cols)].map(() => []); // images array\n  const heights: Array<number> = new Array(cols).fill(0); // maintain heights of each column\n\n  for (let i = 0; i < data.length; i++) {\n    const image = data[i];\n    const selectCol = heights.indexOf(Math.min(...heights));\n    const { height, width } = image.images.fixed_width;\n\n    //   Get new height with ratio\n    const heightWithRatio =\n      (parseInt(height) * screenWidth) / cols / parseInt(width);\n\n    //   Update height\n    heights[selectCol] += heightWithRatio;\n\n    //   Add image on to column\n    items[selectCol].push({\n      gif: image.images.fixed_width,\n      still: image.images.fixed_width_still,\n      height: heightWithRatio,\n      title: image.title,\n    });\n  }\n\n  return { items, heights };\n}\n"],"sourceRoot":""}