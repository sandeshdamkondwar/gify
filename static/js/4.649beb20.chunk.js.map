{"version":3,"sources":["components/GIFPlayer/GIFPlayer.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","helpers/utils.ts","components/GIFContainer/GIFContainer.tsx","hooks/useWindowSize.ts","routes/Home/Home.tsx"],"names":["GifPlayer","gif","still","title","className","single","height","autoPlay","refPlaceholder","React","useRef","useState","playing","setplaying","toggle","useCallback","removePlaceholder","current","remove","classes","classNames","imageAttr","src","onLoad","onError","heigh","key","onClick","style","ref","alt","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","getNoOfCols","windowSize","Math","floor","memo","fetchGifs","cols","setCols","offset","width","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","setHeight","then","res","data","screenWidth","highRes","gifAttr","stillAttr","items","map","heights","fill","i","length","image","selectCol","indexOf","min","images","heightWithRatio","parseInt","push","generateCols","max","colItems","colItem","itemKey","GIFPlayer","url","gf","GiphyFetch","process","useContext","AppContext","state","pageOffset","search","query","limit"],"mappings":"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","file":"static/js/4.649beb20.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport classNames from \"classnames\";\ninterface IGIFPlayerProps {\n  gif: string;\n  still: string;\n  height: number;\n  single?: boolean;\n  title: string;\n  className: string;\n  autoPlay?: boolean;\n}\n\nconst GifPlayer = ({\n  gif,\n  still,\n  title,\n  className,\n  single,\n  height,\n  autoPlay = false,\n}: IGIFPlayerProps) => {\n  const refPlaceholder = React.useRef<HTMLDivElement>(null);\n  const [playing, setplaying] = useState(autoPlay);\n\n  const toggle = useCallback(() => {\n    if (autoPlay) return;\n    setplaying(!playing);\n  }, [autoPlay, playing]);\n\n  const removePlaceholder = useCallback(() => {\n    refPlaceholder?.current?.remove();\n  }, []);\n\n  const classes = classNames(\"gif_player\", className, {\n    playing: playing,\n    single: single,\n  });\n\n  let imageAttr: any = {\n    src: playing ? gif || still : still || gif,\n    onLoad: removePlaceholder,\n    onError: removePlaceholder,\n  };\n\n  imageAttr.heigh = height;\n\n  if (single) {\n    imageAttr.key = imageAttr.src;\n  }\n\n  return (\n    <div className={classes} onClick={toggle} style={{ height: `${height}px` }}>\n      <div className=\"play_button\"></div>\n\n      <div className=\"placeholder\" ref={refPlaceholder}></div>\n      <img {...imageAttr} alt={title} />\n    </div>\n  );\n};\n\nexport default GifPlayer;\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { GIFDatum } from \"../defs/interfaces\";\n\nexport function getNoOfCols(windowSize: number) {\n  if (windowSize < 500) return 2;\n  else if (windowSize < 700) return 3;\n  else return Math.floor(windowSize / 250);\n}\n\ninterface IGenerateProps {\n  data: GIFDatum[];\n  screenWidth: number;\n  cols: number;\n  highRes?: boolean;\n}\nexport function generateCols({\n  data,\n  screenWidth,\n  cols,\n  highRes = false,\n}: IGenerateProps) {\n  const gifAttr = highRes ? \"original\" : \"fixed_width\";\n  const stillAttr = highRes ? \"original_still\" : \"fixed_width_still\";\n\n  const items: Array<any> = [...new Array(cols)].map(() => []); // images array\n  const heights: Array<number> = new Array(cols).fill(0); // maintain heights of each column\n\n  for (let i = 0; i < data.length; i++) {\n    const image = data[i];\n    const selectCol = heights.indexOf(Math.min(...heights));\n    const { height, width } = image.images[gifAttr];\n\n    //   Get new height with ratio\n    const heightWithRatio =\n      (parseInt(height) * screenWidth) / cols / parseInt(width);\n\n    //   Update height\n    heights[selectCol] += heightWithRatio;\n\n    //   Add image on to column\n    items[selectCol].push({\n      gif: image.images[gifAttr],\n      still: image.images[stillAttr],\n      height: heightWithRatio,\n      title: image.title,\n    });\n  }\n\n  return { items, heights };\n}\n","import React, { useEffect, useState } from \"react\";\n\n// Helpers\nimport { generateCols, getNoOfCols } from \"../../helpers/utils\";\n\n// Hooks\nimport useWindowSize from \"../../hooks/useWindowSize\";\n\n// Defs\nimport { IGifItem } from \"../../defs/interfaces\";\n\n// Components\nimport GIFPlayer from \"../../components/GIFPlayer\";\n\nfunction GIFContainer({\n  fetchGifs,\n}: {\n  fetchGifs: (offset: number) => Promise<any>;\n}) {\n  const [cols, setCols] = useState<any[]>([]);\n  const [offset] = useState<number>(0);\n  const windowSize = useWindowSize();\n  const [height, setHeight] = useState(0);\n\n  useEffect(() => {\n    if (windowSize.width > 0) {\n      fetchGifs(offset).then((res: any) => {\n        const { items, heights } = generateCols({\n          data: res.data instanceof Array ? res.data : [res.data],\n          screenWidth: windowSize.width,\n          cols: getNoOfCols(windowSize.width),\n        });\n        setHeight(Math.max(...heights));\n        setCols(items);\n      });\n    }\n  }, [fetchGifs, offset, windowSize]);\n\n  return (\n    <div className=\"gif-items-cols\" style={{ height }}>\n      {cols.map((colItems: Array<any>, key: number) => {\n        return (\n          <div key={key} className=\"gif-items-col\">\n            {colItems.map((colItem: IGifItem, itemKey: number) => (\n              <GIFPlayer\n                className=\"gif-item\"\n                key={itemKey}\n                gif={colItem.gif.url}\n                still={colItem.still.url}\n                title={colItem.title}\n                height={colItem.height}\n              />\n            ))}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default React.memo(GIFContainer);\n","import { useState, useEffect } from \"react\";\n\nexport default function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: 0,\n    height: 0,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n","import React, { useCallback, useContext } from \"react\";\nimport { GiphyFetch } from \"@giphy/js-fetch-api\";\n\n// Components\nimport GIFContainer from \"../../components/GIFContainer\";\n\n// Contexts\nimport { AppContext } from \"../../contexts/App\";\n\nconst GIPHY_KEY = process.env.REACT_APP_GIPHY_ACCESS_KEY || \"\";\nconst gf = new GiphyFetch(GIPHY_KEY);\n\nfunction Home() {\n  const [state] = useContext<any>(AppContext);\n  const fetchGifs = useCallback(\n    (pageOffset: number) => {\n      return gf.search(state.query, { offset: pageOffset, limit: 100 });\n    },\n    [state.query]\n  );\n\n  const isQuery = !!state.query;\n\n  if (isQuery) {\n    return (\n      <div>\n        <h3 className=\"page-heading\">Search Result...</h3>\n        <GIFContainer fetchGifs={fetchGifs} />\n      </div>\n    );\n  }\n  return <h3 className=\"page-heading-center\">Search Your GIF Above...</h3>;\n}\n\nexport default React.memo(Home);\n"],"sourceRoot":""}