{"version":3,"sources":["components/Nav/Nav.tsx","components/SearchBar/SearchBar.tsx","components/Header/Header.tsx","helpers/AsyncComponent.js","routes/Home/index.ts","routes/Trending/index.ts","routes/Random/index.ts","routes/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["React","memo","className","exact","activeClassName","to","Search","type","id","aria-label","value","placeholder","onClick","SearchBar","getComponent","AsyncComponent","state","Component","this","then","ComponentToRender","setState","props","Home","module","default","Trending","Random","Router","path","App","basename","process","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.49ea22af.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction Nav() {\n  return (\n    <div className=\"nav\">\n      <NavLink\n        className=\"nav-item button\"\n        exact\n        activeClassName=\"active\"\n        to=\"/\"\n      >\n        Home\n      </NavLink>\n\n      <NavLink\n        className=\"nav-item button\"\n        exact\n        activeClassName=\"active\"\n        to=\"/trending\"\n      >\n        Trending\n      </NavLink>\n\n      <NavLink\n        className=\"nav-item button\"\n        exact\n        activeClassName=\"active\"\n        to=\"/random\"\n      >\n        Random\n      </NavLink>\n    </div>\n  );\n}\n\nexport default React.memo(Nav);\n","import React from \"react\";\n\nfunction Search() {\n  const val = \"asd\";\n\n  const onClick = () => {};\n\n  return (\n    <div className=\"search-bar\">\n      <div className=\"input-container\">\n        <input\n          type=\"search\"\n          id=\"gif-search\"\n          aria-label=\"Search GIFs\"\n          value={val}\n          placeholder=\"Search GIFs\"\n        ></input>\n        <button className=\"action\" onClick={onClick}>\n          Go\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport Nav from \"../Nav\";\nimport SearchBar from \"../SearchBar\";\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <SearchBar />\n      <Nav />\n    </div>\n  );\n}\n\nexport default React.memo(Header);\n","import React, { Component } from \"react\";\nexport default function (getComponent) {\n  class AsyncComponent extends Component {\n    static Component = null;\n    state = { Component: AsyncComponent.Component };\n\n    UNSAFE_componentWillMount() {\n      if (!this.state.Component) {\n        getComponent().then((ComponentToRender) => {\n          AsyncComponent.Component = ComponentToRender;\n          this.setState({ Component: ComponentToRender });\n        });\n      }\n    }\n    render() {\n      const ComponentToRender = this.state.Component;\n      if (ComponentToRender) {\n        return <ComponentToRender {...this.props} />;\n      }\n      return null;\n    }\n  }\n  return AsyncComponent;\n}\n","import AsyncComponent from \"../../helpers/AsyncComponent\";\n\nconst Home = AsyncComponent(() =>\n  import(/* webpackChunkName: \"Home\" */ \"./Home\").then(\n    (module) => module.default\n  )\n);\n\nexport default Home;\n","import AsyncComponent from \"../../helpers/AsyncComponent\";\n\nconst Trending = AsyncComponent(() =>\n  import(/* webpackChunkName: \"Trending\" */ \"./Trending\").then(\n    (module) => module.default\n  )\n);\n\nexport default Trending;\n","import AsyncComponent from \"../../helpers/AsyncComponent\";\n\nconst Random = AsyncComponent(() =>\n  import(/* webpackChunkName: \"Random\" */ \"./Random\").then(\n    (module) => module.default\n  )\n);\n\nexport default Random;\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Home from \"../routes/Home\";\nimport Trending from \"../routes/Trending\";\nimport Random from \"../routes/Random\";\n\nfunction Router() {\n  return (\n    <div className=\"gif-container\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/trending\">\n          <Trending />\n        </Route>\n        <Route path=\"/random\">\n          <Random />\n        </Route>\n        <Route>\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default Router;\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport Header from \"./components/Header\";\nimport Router from \"./routes\";\n\nconst BASE_URL = process.env.PUBLIC_URL;\n\nfunction App() {\n  return (\n    <BrowserRouter basename={BASE_URL}>\n      <Header />\n      <Router />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/base.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}