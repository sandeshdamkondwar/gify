{"version":3,"sources":["components/GIFPlayer/GIFPlayer.tsx","routes/Random/Random.tsx"],"names":["GifPlayer","gif","still","title","className","single","height","autoPlay","refPlaceholder","React","useRef","useState","playing","setplaying","toggle","useCallback","removePlaceholder","current","remove","classes","classNames","imageAttr","src","onLoad","onError","key","imageHeight","Math","floor","PADDING","onClick","style","data-test-id","ref","data-testid","alt","gf","GiphyFetch","memo","item","setItem","offset","setOffset","fetchGif","random","limit","then","res","imageItem","data","images","fixed_width","url","width","useEffect","loadNext"],"mappings":"0KAoEeA,EAtDG,SAAC,GAQK,IAPtBC,EAOqB,EAPrBA,IACAC,EAMqB,EANrBA,MACAC,EAKqB,EALrBA,MACAC,EAIqB,EAJrBA,UACAC,EAGqB,EAHrBA,OACAC,EAEqB,EAFrBA,OAEqB,IADrBC,gBACqB,SACfC,EAAiBC,IAAMC,OAAuB,MAD/B,EAESC,mBAASJ,GAFlB,mBAEdK,EAFc,KAELC,EAFK,KAIfC,EAASC,uBAAY,WACrBR,GACJM,GAAYD,KACX,CAACL,EAAUK,IAERI,EAAoBD,uBAAY,WAAO,IAAD,EAC5B,OAAdP,QAAc,IAAdA,GAAA,UAAAA,EAAgBS,eAAhB,SAAyBC,WACxB,IAEGC,EAAUC,IAAW,aAAchB,GAAa,GAAI,CACxDQ,QAASA,EACTP,OAAQA,IAGNgB,EAAiB,CACnBC,IAAKV,EAAUX,GAAOC,EAAQA,GAASD,EACvCsB,OAAQP,EACRQ,QAASR,GAKPX,IACFgB,EAAUI,IAAMJ,EAAUC,KAG5B,IAAMI,EAAcC,KAAKC,MAAMtB,EAASuB,IAExC,OACE,yBACEzB,UAAWe,EACXW,QAAShB,EACTiB,MAAO,CAAEzB,OAAO,GAAD,OAAKoB,EAAL,QAEf,yBAAKtB,UAAU,cAAc4B,eAAc7B,IAE3C,yBAAKC,UAAU,cAAc6B,IAAKzB,IAClC,uCAAK0B,cAAY,aAAgBb,EAAjC,CAA4Cc,IAAKhC,Q,kFCtDjDiC,EAAK,IAAIC,aADG,oCAoDH5B,cAAM6B,MAjDrB,WAAmB,IAAD,EACQ3B,mBAAc,MADtB,mBACT4B,EADS,KACHC,EADG,OAEY7B,mBAAiB,GAF7B,mBAET8B,EAFS,KAEDC,EAFC,KAGVC,EAAW5B,uBAAY,WAC3B,OAAOqB,EAAGQ,OAAO,CAAEH,OAAQA,EAAQI,MAAO,IAAKC,MAAK,SAACC,GACnD,IAAMC,EAAYD,EAAIE,KAAKC,OAAOC,YAElCX,EAAQ,CACNvC,IAAK+C,EAAUI,IACflD,MAAO8C,EAAUI,IACjBjD,MAAO4C,EAAIE,KAAK9C,MAChBG,OAAQ0C,EAAU1C,OAClB+C,MAAOL,EAAUK,aAGpB,CAACZ,IAEJa,qBAAU,WACRX,MACC,CAACA,IAEJ,IAAMY,EAAWxC,uBAAY,WAC3B2B,EAAUD,EAAS,KAClB,CAACA,IAEJ,OACE,yBAAKrC,UAAU,oBACZmC,EACC,kBAAC,IAAD,CACEnC,UAAU,WACVH,IAAKsC,EAAKtC,IACVC,MAAOqC,EAAKrC,MACZC,MAAOoC,EAAKpC,MACZE,QAAQ,EACRC,OAAQiC,EAAKjC,OACbC,UAAU,IAGZ,yBAAKH,UAAU,eAAf,cAEF,yBAAKA,UAAU,YACb,4BAAQA,UAAU,aAAa0B,QAASyB,GAAxC","file":"static/js/6.27766d09.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport classNames from \"classnames\";\n\nconst PADDING = 5;\ninterface IGIFPlayerProps {\n  gif: string;\n  still: string;\n  height: number;\n  title: string;\n  className?: string;\n  single?: boolean;\n  autoPlay?: boolean;\n}\n\nconst GifPlayer = ({\n  gif,\n  still,\n  title,\n  className,\n  single,\n  height,\n  autoPlay = false,\n}: IGIFPlayerProps) => {\n  const refPlaceholder = React.useRef<HTMLDivElement>(null);\n  const [playing, setplaying] = useState(autoPlay);\n\n  const toggle = useCallback(() => {\n    if (autoPlay) return;\n    setplaying(!playing);\n  }, [autoPlay, playing]);\n\n  const removePlaceholder = useCallback(() => {\n    refPlaceholder?.current?.remove();\n  }, []);\n\n  const classes = classNames(\"gif_player\", className || \"\", {\n    playing: playing,\n    single: single,\n  });\n\n  let imageAttr: any = {\n    src: playing ? gif || still : still || gif,\n    onLoad: removePlaceholder,\n    onError: removePlaceholder,\n  };\n\n  // imageAttr.height = height;\n\n  if (single) {\n    imageAttr.key = imageAttr.src;\n  }\n\n  const imageHeight = Math.floor(height - PADDING * 2);\n\n  return (\n    <div\n      className={classes}\n      onClick={toggle}\n      style={{ height: `${imageHeight}px` }}\n    >\n      <div className=\"play_button\" data-test-id={title}></div>\n\n      <div className=\"placeholder\" ref={refPlaceholder}></div>\n      <img data-testid=\"gif-image\" {...imageAttr} alt={title} />\n    </div>\n  );\n};\n\nexport default GifPlayer;\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { GiphyFetch } from \"@giphy/js-fetch-api\";\n\n// Components\nimport GIFPlayer from \"../../components/GIFPlayer\";\n\n// import { GIFDatum} from \"../../defs/interfaces\"\n\nconst GIPHY_KEY = \"dLTulzVpNZqXjYVV7bCY7SAW2cpASWSk\";\nconst gf = new GiphyFetch(GIPHY_KEY);\n\nfunction Random() {\n  const [item, setItem] = useState<any>(null);\n  const [offset, setOffset] = useState<number>(0);\n  const fetchGif = useCallback(() => {\n    return gf.random({ offset: offset, limit: 1 }).then((res: any) => {\n      const imageItem = res.data.images.fixed_width;\n\n      setItem({\n        gif: imageItem.url,\n        still: imageItem.url,\n        title: res.data.title,\n        height: imageItem.height,\n        width: imageItem.width,\n      });\n    });\n  }, [offset]);\n\n  useEffect(() => {\n    fetchGif();\n  }, [fetchGif]);\n\n  const loadNext = useCallback(() => {\n    setOffset(offset + 1);\n  }, [offset]);\n\n  return (\n    <div className=\"random-container\">\n      {item ? (\n        <GIFPlayer\n          className=\"gif-item\"\n          gif={item.gif}\n          still={item.still}\n          title={item.title}\n          single={true}\n          height={item.height}\n          autoPlay={true}\n        />\n      ) : (\n        <div className=\"gif-loading\">...Loading</div>\n      )}\n      <div className=\"load-new\">\n        <button className=\"btn action\" onClick={loadNext}>\n          Another Random GIF\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(Random);\n"],"sourceRoot":""}